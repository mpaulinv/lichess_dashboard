import pandas as pd
import streamlit as st
import plotly.express as px
from transformers import pipeline
from lichess_api import fetch_lichess_games
import json



def summarize_data(data, username):
    """
    Summarize the chess data for analysis, excluding Elo progression.

    :param data: Processed chess data (Pandas DataFrame)
    :param username: Lichess username
    :return: A dictionary containing the summarized data
    """
    # Win rates
    white_win_rate, black_win_rate = calculate_win_rates(data)

    # Game results
    game_results = calculate_games_by_result(data).to_dict()

    # Create a summary dictionary (excluding Elo progression)
    summary = {
        "username": username,
        "win_rates": {
            "white": white_win_rate,
            "black": black_win_rate,
        },
        "game_results": game_results,
    }

    return summary


# Calculate win rates
def calculate_win_rates(data):
    white_games = data[data['UserColor'] == 'white']
    black_games = data[data['UserColor'] == 'black']

    white_wins = white_games[white_games['Result'] == 'white'].shape[0]
    black_wins = black_games[black_games['Result'] == 'black'].shape[0]

    total_white_games = white_games.shape[0]
    total_black_games = black_games.shape[0]

    white_win_rate = (white_wins / total_white_games) * 100 if total_white_games > 0 else 0
    black_win_rate = (black_wins / total_black_games) * 100 if total_black_games > 0 else 0

    return white_win_rate, black_win_rate


# Calculate games by result
def calculate_games_by_result(data):
    results = data['Result'].value_counts()
    return results


# Extract Elo progression
def extract_elo_progression(data, username):
    # Determine the user's Elo based on their color
    data["UserElo"] = data.apply(
        lambda row: row["WhiteElo"] if row["UserColor"] == "white" else row["BlackElo"], axis=1
    )
    # Sort games by date
    data = data.sort_values(by="Date")
    return data[["Date", "UserElo"]]


# Function to analyze data with a Hugging Face model
def analyze_with_agent(summary):
    """
    Use a Hugging Face model to analyze the summarized chess data and provide insights.

    :param summary: Summarized chess data (dictionary)
    :return: Insights generated by the model
    """
    # Convert the summary dictionary to a JSON-like string
    summary_text = json.dumps(summary, indent=2)
    # Print the summary for debugging
    print("Summary passed to the model:")
    print(summary_text)

    # Ensure the summary is not empty
    if not summary_text.strip():
        return "No data available to analyze."

    # Prepare the prompt
    prompt = f"""
    You are a chess data analyst. Analyze the following summarized chess data and provide insights:
    - Performance with white vs black pieces.
    - Distribution of game results (wins, losses, draws).
    - Suggestions for improvement based on the data.

    Summarized Data:
    {summary_text}
    """

    try:
        # Load a smaller Hugging Face text generation model
        generator = pipeline("text-generation", model="distilgpt2")

        # Generate insights with max_new_tokens
        response = generator(prompt, max_new_tokens=200, do_sample=True, temperature=0.7)

        # Extract and return the generated text
        return response[0]["generated_text"]
    except Exception as e:
        return f"An error occurred during text generation: {e}"


# Streamlit app
def main():
    st.title("Lichess Dashboard with AI Insights")

    # Sidebar inputs
    st.sidebar.header("Input Parameters")
    username = st.sidebar.text_input("Enter your Lichess username", value="")
    start_date = st.sidebar.date_input("Start Date")
    end_date = st.sidebar.date_input("End Date")
    variant = st.sidebar.selectbox("Select Game Variant", ["blitz", "bullet", "rapid", "classical"])
    analyzed_filter = st.sidebar.selectbox(
        "Filter by Analysis",
        ["All Games", "Analyzed Games Only", "Non-Analyzed Games"]
    )

    # Fetch data button
    if st.sidebar.button("Fetch Data"):
        # Convert dates to milliseconds
        since = int(pd.Timestamp(start_date).timestamp() * 1000)
        until = int(pd.Timestamp(end_date).timestamp() * 1000)

        # Determine the analyzed parameter
        analyzed = None
        if analyzed_filter == "Analyzed Games Only":
            analyzed = True
        elif analyzed_filter == "Non-Analyzed Games":
            analyzed = False

        # Fetch games
        with st.spinner("Fetching games..."):
            try:
                games_data = fetch_lichess_games(username, since, until, variant, analyzed=analyzed)
                games_df = pd.DataFrame(games_data)

                if games_df.empty:
                    st.warning("No games found for the given parameters.")
                else:
                    # Display dashboards
                    st.write(f"### Chess Dashboard for {username}")

                    # Data preview
                    st.write("### Data Preview")
                    st.dataframe(games_df.head())

                    # Elo progression
                    st.write("### Elo Progression Over Time")
                    elo_progression = extract_elo_progression(games_df, username)
                    fig_elo = px.line(
                        elo_progression,
                        x="Date",
                        y="UserElo",
                        title="Elo Progression Over Time",
                        labels={"Date": "Date", "UserElo": "Elo"}
                    )
                    st.plotly_chart(fig_elo)

                    # Win rates
                    white_win_rate, black_win_rate = calculate_win_rates(games_df)
                    st.write(f"### Win Rates")
                    st.write(f"**White Win Rate:** {white_win_rate:.2f}%")
                    st.write(f"**Black Win Rate:** {black_win_rate:.2f}%")

                    # Win rate bar chart
                    win_rate_data = pd.DataFrame({
                        "Color": ["White", "Black"],
                        "Win Rate (%)": [white_win_rate, black_win_rate]
                    })
                    fig_win_rate = px.bar(win_rate_data, x="Color", y="Win Rate (%)", title="Win Rate by Color", color="Color")
                    st.plotly_chart(fig_win_rate)

                    # Games by result
                    results = calculate_games_by_result(games_df)
                    st.write(f"### Games by Result")
                    result_data = pd.DataFrame({
                        "Result": results.index,
                        "Count": results.values
                    })
                    fig_result = px.bar(result_data, x="Result", y="Count", title="Games by Result", color="Result")
                    st.plotly_chart(fig_result)

                    # AI Insights
                    st.write("### AI-Generated Insights")
                    summary = summarize_data(games_df, username)

                    # Display the summary for debugging
                    #st.write("#### Debug: Summary Passed to the Model")
                    #st.json(summary)

                    insights = analyze_with_agent(summary)
                    st.write(insights)

            except Exception as e:
                st.error(f"An error occurred: {e}")


if __name__ == "__main__":
    main()